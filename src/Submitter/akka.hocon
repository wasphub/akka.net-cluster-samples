startup {
  actorsystem: "main" #POPULATE NAME OF YOUR ACTOR SYSTEM HERE
}

akka {  
  loglevel = OFF
  
  actor {
    provider = cluster
    deployment {

      # Behavior of the 'worker-router' remoting router. We know is 'remoting' because it has a 'cluster' section!
      /worker-router {
        
        # Routing strategy (how we dispatch work to remote nodes)
        router = round-robin-group

        # Path under which workers live inside the remote nodes
        routees.paths = ["/user/workers"]

        cluster {
          enabled = on

          # This parameter defines how many instances of the router are created local to this process. 
          # Normally 1 is what you want here.
          max-nr-of-instances-per-node = 1

          # Here we force the fact that no workers are allowed on this node, they must be all remote.
          allow-local-routees = off

          # Workers we want to target must be labelled with the 'worker' role.
          use-role = worker
        }
      }

	  /watcher-router {
		router = broadcast-group

        routees.paths = ["/user/watchers"]
        cluster {
          enabled = on
          max-nr-of-instances-per-node = 1
          allow-local-routees = off
          use-role = watcher
        }
      }
	}
  }
              
  remote {
    # log-remote-lifecycle-events = DEBUG
  
    dot-netty.tcp {
      transport-class = "Akka.Remote.Transport.DotNetty.TcpTransport, Akka.Remote"
      applied-adapters = []
      transport-protocol = tcp
      
      public-hostname = "127.0.0.1"
      hostname = "0.0.0.0"
      port = 0
    }
  } 
  
  cluster {
    downing-provider-class = "Akka.Cluster.SplitBrainResolver, Akka.Cluster"
    split-brain-resolver {
      active-strategy = keep-majority
      stable-after = 10s 
    }

    seed-nodes = ["akka.tcp://main@127.0.0.1:6009"] 
    
    roles = [submitter]
  }
}